/*
 * Copyright (C) 2015 Chalmers REVERE
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

// Cartesian messages

message opendlv.Constants [id = 150] {
  const double PI = 3.141592653589793;
  const double DEG2RAD = 0.017453292522222;  // PI/180.0
  const double RAD2DEG = 57.295779513082325; // 1.0 / DEG2RAD;
}

message opendlv.coordinate.Cartesian3 [id = X] {
  float p[3] [id = 1]; // x, y, z
}

message opendlv.coordinate.Spherical3 [id = X] {
  float p[3] [id = 1]; // radius, zenith, azimuth
}

message opendlv.coordinate.Quaternion3 [id = X] {
  float o[4] [id = 1]; // x, y, z, w
}

message opendlv.coordinate.Pose [id = X] {
  opendlv.coordinate.Cartesian3 position [id = 1];
  opendlv.coordinate.Quaternion3 orientation [id = 2];
}

// Proxy messages
message opendlv.proxy.sensor.CartesianTimeOfFlight [id = X] {
  uint32 numberOfPoints;
  opendlv.coordinate.Pose origin;
  list<opendlv.coordinate.Cartesian3> points;
}

message opendlv.proxy.sensor.SphericalTimeOfFlight [id = X] {
  uint32 numberOfPoints;
  opendlv.coordinate.Pose origin;
  list<opendlv.coordinate.Spherical3> points;
}

message opendlv.proxy.sensor.Compass [id = X] {
  float heading[3];
}

message opendlv.proxy.sensor.Gyroscope [id = X] {
  float orientation[3];
}

message opendlv.proxy.sensor.Accelerometer [id = X] {
  float acceleration[3];
}

message opendlv.proxy.sensor.Altimeter [id = X] {
  float altitude;
}

message opendlv.proxy.sensor.Wgs84Gps [id = X] {
  double latitude;
  double longitude;
  double altitude;
  double ecefX;
  double ecefY;
  double ecefZ;
  float speedHorizontal;
  float speedVertical;
  float northHeading;
  uint16 gpsWeek;
  uint32 gpsWeekMillisecond;
  uint16 utcOffset;
  uint8 satelliteCount;
}

message opendlv.system.sensor.VehicleCommunicationMessage [id = X] {
  string type;
  uint32 size;
  list<uint8> data;
}

message opendlv.system.actuator.Steering [id = X] {
  float angle; // Depends on CAN.
}

message opendlv.system.actuator.Brake [id = X] {
  float pressure; // Depends on CAN.
}

message opendlv.system.actuator.Throttle [id = X] {
  float acceleration; // Depends on CAN.
}

/*
// Action messages
message opendlv.action.Correction [id = X] {
  TimeStamp startTime;
  std::string type;
  bool isInhibitory;
  float amplitude;
}

// Sensation
message opendlv.sensation.RoadWheel [id = X] {
  float angularVelocity;
  int index;
}

message opendlv.sensation.Axle [id = X] {
  float load;
  int index;
}

message opendlv.system.sensation.Geolocation [id = x] {
  float longitude;
  float latitude;
  float altitude;
}

message opendlv.system.sensation.BodyPart [id = x] {
  opendlv.cartesian.Point3 position; // From body origo to body part center of mass
  std::string gemoetryPath;
  float width;
  float height;
  float depth;
  float mass;
  int index;
}

message opendlv.system.sensation.Orientation [id = x] {
  float roll;
  float pitch;
  float yaw;
  int partIndex;
}

message opendlv.sensation.Balance [id = X] {
  float rollRate;
  float pitchRate;
  float yawRate;
  int partIndex;
}

message opendlv.sensation.VisionShared [id = X] {
  std::string sharedMemoryName;
  int width;
  int height;
  int channels;
  int bpp;
}

message opendlv.sensation.Vision [id = X] {
  list<uint8> data;
  int width;
  int height;
  int channels;
  int bpp;
}

message opendlv.sensation.Looming [id = X] {
  float angle;
  float looming;
  float size;
}

message opendlv.sensation.OpticalFlow [id = X] {
  float flow;
}

message opendlv.sensation.DirectionOfMovement [id = X] {
  opendlv.coordinate.Spherical3 directionOfMovement;
}

// Perception messages
message opendlv.perception.ObjectDistanceToBody [id = X] {
  opendlv.coordinate.Cartesian3 bodySkinPosition;
  opendlv.coordinate.Cartesian3 objectSurfacePosition;
}


message opendlv.perception.DesiredOpticalFlow [id = X] {
  float flow;
}

message opendlv.perception.DesiredDirectionOfMovement [id = X] {
  opendlv.coordinate.Spherical3 directionOfMovement;
}

message opendlv.perception.Object [id = X] {
  list<opendlv.perception.ObjectProperty> properties;
  TimeStamp lastSeen;
  std::string type;
  float angle;
  float size;
  uint32 id;
}

message opendlv.perception.ObjectDesiredAngle [id = X] {
  float desiredAngle;
  uint32 id;
}

message opendlv.perception.ObjectDesiredSize [id = X] {
  float desiredSize;
  uint32 id;
}

message opendlv.perception.ObjectLooming [id = X] {
  TimeStamp identified;
  opendlv.sensation.Looming looming;
  uint32 id;
}

message opendlv.perception.ObjectProperty [id = X] {
  TimeStamp identified;
  std::string name;
  std::string value;
  uint32 id;
}

message opendlv.perception.ObjectMetricDistance [id = X] {
  float distance;
  float angle;
  float size;
  uint32 id;
}

// Knowledge


*/
